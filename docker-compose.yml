version: "3.8"

services:
  nginx-balancer:
    container_name: nginx-balancer
    build:
      context: ./nginx-balancer
    ports:      
      - 443:443
    volumes:
      - ..:/var/www:rw
      - ./volumes/log/nginx-balancer:/var/log/nginx     
    restart: unless-stopped
    depends_on:
      - nginx-1
      - nginx-2
    networks:
      - lb-net 

  php-fpm-1:
    container_name: php-fpm-1
    build:
      context: ./../
      dockerfile: ./docker/php-fpm-1/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}        
    volumes:      
      - ./../prod-1/:/var/www/
    restart: unless-stopped
    depends_on:
      - alpha
      - beta
      - gamma
      - redis
    networks:
      - lb-net  

  nginx-1:
    container_name: nginx-1
    build:
      context: ./nginx-1
    ports:
      - 8081:80
    volumes:
      - ..:/var/www:rw
      - ./volumes/log/nginx-1:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - php-fpm-1      
    networks:
      - lb-net  

  php-fpm-2:
    container_name: php-fpm-2
    build:
      context: ./../
      dockerfile: ./docker/php-fpm-2/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}          
    volumes:      
      - ./../prod-2/:/var/www/
    restart: unless-stopped
    depends_on:
      - alpha
      - beta
      - gamma
      - redis
    networks:
      - lb-net  

  nginx-2:
    container_name: nginx-2
    build:
      context: ./nginx-2
    ports:
      - 8082:80
    volumes:
      - ..:/var/www:rw
      - ./volumes/log/nginx-2:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - php-fpm-2
    networks:
      - lb-net

  alpha:
    image: mysql/mysql-server:8.0
    container_name: alpha
    hostname: alpha
    ports:
      - '1441:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=alpha:6606" ]    
    
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql/scripts:/docker-entrypoint-initdb.d
      - ./mysql/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-net  

  beta:
    image: mysql/mysql-server:8.0
    container_name: beta
    hostname: beta
    ports:
      - '1442:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=beta:6606" ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-net  

  gamma:
    image: mysql/mysql-server:8.0
    container_name: gamma
    hostname: gamma
    ports:
      - '1443:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=gamma:6606" ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-net            

  redis:
    image: redis/redis-stack
    container_name: redis
    volumes:
      - ./volumes/redis-data/:/data
    ports:
      - 6379:6379
      - 8003:8001
    networks:
      - lb-net



  elasticsearch01:
    image: elasticsearch:7.16.1
    container_name: el1
    volumes:
      - type: bind
        source: ./el/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - ./volumes/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - node.name=elasticsearch01
      - discovery.seed_hosts=elasticsearch02
      - cluster.initial_master_nodes=elasticsearch01,elasticsearch02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - lb-net    

  elasticsearch02:
    image: elasticsearch:7.16.1
    container_name: el2   
    volumes:
      - type: bind
        source: ./el/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - ./volumes/elasticsearch2:/usr/share/elasticsearch/data
    environment:
      - node.name=elasticsearch02
      - discovery.seed_hosts=elasticsearch01
      - cluster.initial_master_nodes=elasticsearch01,elasticsearch02
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - lb-net    


  php-fpm-test:
    container_name: php-fpm-test
    build:
      context: ./../
      dockerfile: ./docker/php-fpm-test/Dockerfile
      args:
        - PUID=${PUID}
        - PGID=${PGID}
        - INSTALL_XDEBUG=${INSTALL_XDEBUG}
    environment:
      PHP_IDE_CONFIG: "serverName=Docker"
    volumes:      
      - ./../test/:/var/www/
    restart: unless-stopped
    depends_on:
      - alpha-test
      - beta-test
      - gamma-test
      - redis-test
    networks:
      - lb-test-net  

  nginx-test:
    container_name: nginx-test
    build:
      context: ./nginx-test
    ports:
      - 8089:80
    volumes:
      - ..:/var/www:rw
      - ./volumes/log/nginx-test:/var/log/nginx
    restart: unless-stopped
    depends_on:
      - php-fpm-test
    networks:
      - lb-test-net  

  
  alpha-test:
    image: mysql/mysql-server:8.0
    container_name: alpha-test
    hostname: alpha-test
    ports:
      - '1444:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=alpha-test:6606" ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql-test/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql-test/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-test-net  

  beta-test:
    image: mysql/mysql-server:8.0
    container_name: beta-test
    hostname: beta-test
    ports:
      - '1445:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=beta-test:6606" ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql-test/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql-test/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-test-net 

  gamma-test:
    image: mysql/mysql-server:8.0
    container_name: gamma-test
    hostname: gamma-test
    ports:
      - '1446:3306'
    restart: unless-stopped
    # sets the network address which the member provides for connections from other members, specified as a host:port formatted string.
    command: [ "mysqld", "--loose-group-replication-local-address=gamma-test:6606" ]
    environment:
      MYSQL_ROOT_HOST: '%'
      MYSQL_USER: root
      MYSQL_ROOT_PASSWORD: toor
      MYSQL_DATABASE: lpg
    volumes:
      - ./mysql-test/configs/my-cnf:/etc/mysql/my.cnf
      - ./mysql-test/scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
      interval: 2s
      retries: 20
    networks:
      - lb-test-net         


  redis-test:
    image: redis/redis-stack
    container_name: redis-test
    volumes:
      - ./volumes-test/redis-data/:/data
    ports:
      - 6380:6379
      - 8004:8001
    networks:
      - lb-test-net


  elasticsearch01-test:
    image: elasticsearch:7.16.1
    container_name: el1-test
    volumes:
      - type: bind
        source: ./el-test/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - ./volumes-test/elasticsearch:/usr/share/elasticsearch/data
    ports:
      - "9201:9200"
      - "9301:9300"
    environment:
      - node.name=elasticsearch01-test
      - discovery.seed_hosts=elasticsearch02-test
      - cluster.initial_master_nodes=elasticsearch01-test,elasticsearch02-test
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - lb-test-net    

  elasticsearch02-test:
    image: elasticsearch:7.16.1
    container_name: el2-test   
    volumes:
      - type: bind
        source: ./el-test/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - ./volumes-test/elasticsearch2:/usr/share/elasticsearch/data
    environment:
      - node.name=elasticsearch02-test
      - discovery.seed_hosts=elasticsearch01-test
      - cluster.initial_master_nodes=elasticsearch01-test,elasticsearch02-test
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - lb-test-net    



networks:
  lb-net:
    name: lb-network

  lb-test-net:
    name: lb-test-network  

volumes:
  db_data: